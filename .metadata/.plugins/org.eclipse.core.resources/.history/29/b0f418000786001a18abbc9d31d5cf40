package com.aeox.jkaiser.core;

import java.util.Map;

import com.aeox.jkaiser.core.exception.KaiserException;
import com.aeox.jkaiser.core.result.ExceptionResult;

import lombok.Data;

@Data
public abstract class Task<R> {
	
	public abstract String getName();
	
	public abstract String getVersion();
	
	public abstract String getDescription();
	
	public abstract Map<String, ParameterType> getRequiredParameters(); 
	
	public abstract Result<R> onCall(final JobContext context) throws KaiserException;
	
	public boolean checkParameters(final JobContext context) {
		this.getRequiredParameters().keySet().forEach((paramKey) -> {
			if (!this.getRequiredParameters().containsKey(paramKey)) {
				return false;
			}
		});
		return true;
	}
	
	public Result<?> run(final JobContext context) {
		
		
		
		Result<?> result;
		try {
			result = this.onCall(context);
		} catch (KaiserException e) {
			result = new ExceptionResult(e.getMessage()); 
		}
		return result;
	}
}
